#!/usr/bin/env python
# RSBand Local Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


#L1 parameters Angle_gain baseSpeed baseAngle MAX_SLOW_DOWN qujian_min qujian_max TRAVERSAL_POINT KP KD
grp_L1 = gen.add_group("L1", type="tab")
grp_L1.add("reset",bool_t,0,"",False);

#basespeed
grp_L1.add("baseSpeed",int_t,0,"",1630,1550,1800);
#slow_down_vel
grp_L1.add("MAX_1",double_t,0,"",2.5,1.0,5.0);
grp_L1.add("MAX_2",double_t,0,"",15.0,10.0,50.0);
grp_L1.add("MAX_3",double_t,0,"",18.0,10.0,50.0);
#start_vel
grp_L1.add("BLOOM_START_POINT",int_t,0,"",2,2,200);
grp_L1.add("BLOOM_START_VEL",double_t,0,"",1600,1550,2020);
#rush_vel
grp_L1.add("RUSH_VEL",double_t,0,"",1660,1550,2020);
grp_L1.add("RUSH_POINT",int_t,0,"",150,10,500);
#bais point
grp_L1.add("TRAVERSAL_POINT",int_t,0,"",75,10,500);#10  20
#servo
grp_L1.add("KP",double_t,0,"",-5.5,-10.0,0.0);
grp_L1.add("KD",double_t,0,"",-0.3,-10.0,0.0);
#lfw
grp_L1.add("v1",double_t,0,"",1.6,0.0,10.0);#1.6
grp_L1.add("v2",double_t,0,"",5.3,0.0,10.0);
#not use
grp_L1.add("steeringAngle",double_t,0,"+-90",0.0,-90.0,90.0);
grp_L1.add("orientationErr",double_t,0,"",0.0,-180.0,180.0);
grp_L1.add("IntegralErr",double_t,0,"",0.0,0.0,100.0);
grp_L1.add("currant_vel",double_t,0,"",1.0,0.0,6.0);
grp_L1.add("SMOOTHNESS",double_t,0,"",1.0,0.0,3.0);


grp_rectify = gen.add_group("rectify", type="tab")
# common parameters
# rear_steering_mode_enum = gen.enum(
#     [
#         gen.const("None", int_t, 0, "No rear steering"),
#         gen.const("Counter", int_t, 1, "Rear steering of same magnitude, but opposite direction from front steering"),
#         gen.const("Crab", int_t, 2, "Crab rear steering in case of lateral deviation"),
#         gen.const("Hybrid", int_t, 3, "A hybrid steering mode, combining crab and counter steering")
#     ], "An enum for setting rear steering mode")
# grp_rectify.add("rear_steering_mode", int_t, 0, "The rear steering mode which is setted via an enum", 0, 0, 3, edit_method=rear_steering_mode_enum)
# grp_rectify.add("stop", bool_t, 0, "When stop is true publish zero velocity commands", False)
# grp_rectify.add("max_speed", double_t, 0, "The maximum speed of the robot", 0.2, 0.1, 2.0)
# grp_rectify.add("max_steering_angle", double_t, 0, "The maximum steering angle of the virtual middle wheel", 0.4, 0.0, 1.57)
# grp_rectify.add("wheelbase", double_t, 0, "The wheelbase of the robot", 0.5, 0.1, 2.0)
grp_rectify.add("xy_goal_tolerance", double_t, 0, "The maximum distance to the goal, that the goal is perceived as reached, regarding distance", 1.0, 0.0, 5.0)
grp_rectify.add("yaw_goal_tolerance", double_t, 0, "The maximum difference in orientation, that the goal pose is perceived as reached, regarding orientation", 1.0, 0.0, 3.1415)
# grp_rectify.add("update_sub_goal_dist_threshold", double_t, 0, "When the distance between the robot and the current sub goal is less than this value, select new sub goal", 0.4, 0.0, 5.0)
# grp_rectify.add("emergency_planning", bool_t, 0, "Determines whether emergency planning will be used in case of planning fails", True)
# # car like fuzzy path tracking controller parameters
# grp_rectify.add("goal_dist_threshold", double_t, 0, "The threshold that determines closeness to the goal", 0.2, 0.0, 2.0)
# grp_rectify.add("lateral_deviation_tolerance", double_t, 0, "Denotes the maximum acceptable lateral deviation from the plan", 0.1, 0.0, 1.0)
# grp_rectify.add("display_controller_io", bool_t, 0, "If true, display controller input and output information", False)
grp_rectify.add("use_rectify",bool_t,0,"",True);
grp_rectify.add("warning_distance",double_t,0,"",0.7,0.0,10.0);
grp_rectify.add("limit_distance",double_t,0,"",0.01,0.0,20.0);
grp_rectify.add("angle_max",double_t,0,"",3.14,0.0,4.0);
grp_rectify.add("angle_min",double_t,0,"",-3.14,-3.14,10.0);
grp_rectify.add("gain_angle",double_t,0,"",0.5,0.0,10.0);
grp_rectify.add("unit_distance",double_t,0,"",100.0,0.0,1000.0);

exit(gen.generate("rsband_local_planner", "rsband_local_planner", "RSBandPlanner"))
